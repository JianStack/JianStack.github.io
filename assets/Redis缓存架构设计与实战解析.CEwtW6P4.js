import{_ as m}from"./ValaxyMain.vue_vue_type_style_index_0_lang.Dl6f09j6.js";import{e as g,a as b,u as k}from"./chunks/vue-router.OX6wyTgk.js";import{N as f,a3 as n,U as e,S as l,W as a,u as v,O as y,E as C}from"./framework.CGpsDzRo.js";import"./app.JH9xSBGv.js";import"./chunks/dayjs.CCYrSalk.js";import"./chunks/@vueuse/motion.Cj-llAHY.js";import"./chunks/vue-i18n.BIKvsUT3.js";import"./chunks/pinia.DIgot8h-.js";import"./chunks/nprogress.BahbDzmd.js";import"./YunComment.vue_vue_type_style_index_0_lang.GypxAZnc.js";import"./index.C5okkQwF.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.DnrUgoOv.js";import"./post.CQKmAQPh.js";const R=g("/posts/Redis缓存架构设计与实战解析",async i=>JSON.parse('{"title":"Redis缓存架构设计与实战解析(嗨评星球)","description":"","frontmatter":{"title":"Redis缓存架构设计与实战解析(嗨评星球)","date":"2025-07-14","updated":"2025-07-14","categories":"技术分享","tags":["reids","高并发","数据库","开发技巧"],"top":1},"headers":[],"relativePath":"pages/posts/Redis缓存架构设计与实战解析.md","lastUpdated":1755313729000}'),{lazy:(i,p)=>i.name===p.name}),A={__name:"Redis缓存架构设计与实战解析",setup(i,{expose:p}){var o;const{data:c}=R(),d=k(),r=b(),t=Object.assign(r.meta.frontmatter||{},((o=c.value)==null?void 0:o.frontmatter)||{});return r.meta.frontmatter=t,d.currentRoute.value.data=c.value,C("valaxy:frontmatter",t),globalThis.$frontmatter=t,p({frontmatter:{title:"Redis缓存架构设计与实战解析(嗨评星球)",date:"2025-07-14",updated:"2025-07-14",categories:"技术分享",tags:["reids","高并发","数据库","开发技巧"],top:1}}),(s,u)=>{const h=m;return y(),f(h,{frontmatter:v(t)},{"main-content-md":n(()=>u[0]||(u[0]=[l("h1",{id:"高并发场景下的redis缓存架构设计与实战解析-嗨评星球",tabindex:"-1"},[a("高并发场景下的Redis缓存架构设计与实战解析（嗨评星球） "),l("a",{class:"header-anchor",href:"#高并发场景下的redis缓存架构设计与实战解析-嗨评星球","aria-label":'Permalink to "高并发场景下的Redis缓存架构设计与实战解析（嗨评星球）"'},"​")],-1),l("h2",{id:"一、缓存穿透、击穿与雪崩-问题与解决方案",tabindex:"-1"},[a("一、缓存穿透、击穿与雪崩：问题与解决方案 "),l("a",{class:"header-anchor",href:"#一、缓存穿透、击穿与雪崩-问题与解决方案","aria-label":'Permalink to "一、缓存穿透、击穿与雪崩：问题与解决方案"'},"​")],-1),l("h3",{id:"_1-缓存穿透-cache-penetration",tabindex:"-1"},[a("1. 缓存穿透（Cache Penetration） "),l("a",{class:"header-anchor",href:"#_1-缓存穿透-cache-penetration","aria-label":'Permalink to "1. 缓存穿透（Cache Penetration）"'},"​")],-1),l("p",null,[l("strong",null,"问题"),a("：大量请求查询数据库中不存在的数据，导致请求直接穿透到数据库")],-1),l("p",null,[l("strong",null,"解决方案"),a("：")],-1),l("div",{class:"language- vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"// 在CacheClient中的实现")]),a(`
`),l("span",{class:"line"},[l("span",null,"if (r == null) {")]),a(`
`),l("span",{class:"line"},[l("span",null,"    // 缓存空值并设置较短过期时间")]),a(`
`),l("span",{class:"line"},[l("span",null,'    stringRedisTemplate.opsForValue().set(key,"",CACHE_NULL_TTL, TimeUnit.MINUTES);')]),a(`
`),l("span",{class:"line"},[l("span",null,"    return null;")]),a(`
`),l("span",{class:"line"},[l("span",null,"}")])])]),l("button",{class:"collapse"})],-1),l("h3",{id:"_2-缓存击穿-cache-breakdown",tabindex:"-1"},[a("2. 缓存击穿（Cache Breakdown） "),l("a",{class:"header-anchor",href:"#_2-缓存击穿-cache-breakdown","aria-label":'Permalink to "2. 缓存击穿（Cache Breakdown）"'},"​")],-1),l("p",null,[l("strong",null,"问题"),a("：热点key过期瞬间，大量请求直接打到数据库")],-1),l("p",null,[l("strong",null,"解决方案"),a("：")],-1),l("ul",null,[l("li",null,[l("strong",null,"互斥锁方案"),a("：")])],-1),l("div",{class:"language- vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"// 使用Redis分布式锁控制重建过程")]),a(`
`),l("span",{class:"line"},[l("span",null,"boolean isLock = tryLock(lockKey);")]),a(`
`),l("span",{class:"line"},[l("span",null,"if (!isLock) {")]),a(`
`),l("span",{class:"line"},[l("span",null,"    Thread.sleep(50);")]),a(`
`),l("span",{class:"line"},[l("span",null,"    return queryWithMutex(id);")]),a(`
`),l("span",{class:"line"},[l("span",null,"}")])])]),l("button",{class:"collapse"})],-1),l("ul",null,[l("li",null,[l("strong",null,"逻辑过期方案"),a("：")])],-1),l("div",{class:"language- vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"// 使用逻辑过期时间+异步重建")]),a(`
`),l("span",{class:"line"},[l("span",null,"if (expireTime.isAfter(LocalDateTime.now())) {")]),a(`
`),l("span",{class:"line"},[l("span",null,"    return shop; // 未过期直接返回")]),a(`
`),l("span",{class:"line"},[l("span",null,"}")]),a(`
`),l("span",{class:"line"},[l("span",null,"// 过期则异步重建")]),a(`
`),l("span",{class:"line"},[l("span",null,"CACHE_REBUILD_EXECUTOR.submit(() -> {")]),a(`
`),l("span",{class:"line"},[l("span",null,"    // 重建缓存")]),a(`
`),l("span",{class:"line"},[l("span",null,"    this.saveShop2Redis(id,20L);")]),a(`
`),l("span",{class:"line"},[l("span",null,"});")])])]),l("button",{class:"collapse"})],-1),l("h3",{id:"_3-缓存雪崩-cache-avalanche",tabindex:"-1"},[a("3. 缓存雪崩（Cache Avalanche） "),l("a",{class:"header-anchor",href:"#_3-缓存雪崩-cache-avalanche","aria-label":'Permalink to "3. 缓存雪崩（Cache Avalanche）"'},"​")],-1),l("p",null,[l("strong",null,"解决方案"),a("：")],-1),l("ul",null,[l("li",null,"随机设置缓存过期时间"),l("li",null,"集群部署保证高可用"),l("li",null,"预热重要数据")],-1),l("h2",{id:"二、redis高级应用技巧",tabindex:"-1"},[a("二、Redis高级应用技巧 "),l("a",{class:"header-anchor",href:"#二、redis高级应用技巧","aria-label":'Permalink to "二、Redis高级应用技巧"'},"​")],-1),l("h3",{id:"_1-逻辑过期设计",tabindex:"-1"},[a("1. 逻辑过期设计 "),l("a",{class:"header-anchor",href:"#_1-逻辑过期设计","aria-label":'Permalink to "1. 逻辑过期设计"'},"​")],-1),l("div",{class:"language- vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"public class RedisData {")]),a(`
`),l("span",{class:"line"},[l("span",null,"    private LocalDateTime expireTime; // 逻辑过期时间")]),a(`
`),l("span",{class:"line"},[l("span",null,"    private Object data;             // 业务数据")]),a(`
`),l("span",{class:"line"},[l("span",null,"}")]),a(`
`),l("span",{class:"line"},[l("span")]),a(`
`),l("span",{class:"line"},[l("span",null,"// 设置逻辑过期缓存")]),a(`
`),l("span",{class:"line"},[l("span",null,"public void setWithLogicalExpire(String key, Object value, Long time, TimeUnit timeUnit){")]),a(`
`),l("span",{class:"line"},[l("span",null,"    RedisData redisData = new RedisData();")]),a(`
`),l("span",{class:"line"},[l("span",null,"    redisData.setData(value);")]),a(`
`),l("span",{class:"line"},[l("span",null,"    redisData.setExpireTime(LocalDateTime.now().plusSeconds(timeUnit.toSeconds(time)));")]),a(`
`),l("span",{class:"line"},[l("span",null,"    stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));")]),a(`
`),l("span",{class:"line"},[l("span",null,"}")])])]),l("button",{class:"collapse"})],-1),l("h3",{id:"_2-分布式锁实现",tabindex:"-1"},[a("2. 分布式锁实现 "),l("a",{class:"header-anchor",href:"#_2-分布式锁实现","aria-label":'Permalink to "2. 分布式锁实现"'},"​")],-1),l("div",{class:"language- vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"private boolean tryLock(String key){")]),a(`
`),l("span",{class:"line"},[l("span",null,"    // 使用SETNX命令实现分布式锁")]),a(`
`),l("span",{class:"line"},[l("span",null,"    return BooleanUtil.isTrue(")]),a(`
`),l("span",{class:"line"},[l("span",null,"        stringRedisTemplate.opsForValue()")]),a(`
`),l("span",{class:"line"},[l("span",null,'            .setIfAbsent(key, "1", 10, TimeUnit.SECONDS)')]),a(`
`),l("span",{class:"line"},[l("span",null,"    );")]),a(`
`),l("span",{class:"line"},[l("span",null,"}")]),a(`
`),l("span",{class:"line"},[l("span")]),a(`
`),l("span",{class:"line"},[l("span",null,"private void unLock(String key){")]),a(`
`),l("span",{class:"line"},[l("span",null,"    stringRedisTemplate.delete(key);")]),a(`
`),l("span",{class:"line"},[l("span",null,"}")])])]),l("button",{class:"collapse"})],-1),l("h3",{id:"_3-双写一致性策略",tabindex:"-1"},[a("3. 双写一致性策略 "),l("a",{class:"header-anchor",href:"#_3-双写一致性策略","aria-label":'Permalink to "3. 双写一致性策略"'},"​")],-1),l("div",{class:"language- vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"@Override")]),a(`
`),l("span",{class:"line"},[l("span",null,"@Transactional")]),a(`
`),l("span",{class:"line"},[l("span",null,"public Result update(Shop shop) {")]),a(`
`),l("span",{class:"line"},[l("span",null,"    // 先更新数据库")]),a(`
`),l("span",{class:"line"},[l("span",null,"    updateById(shop);")]),a(`
`),l("span",{class:"line"},[l("span",null,"    // 再删除缓存")]),a(`
`),l("span",{class:"line"},[l("span",null,"    stringRedisTemplate.delete(CACHE_SHOP_KEY + shop.getId());")]),a(`
`),l("span",{class:"line"},[l("span",null,"    return Result.ok();")]),a(`
`),l("span",{class:"line"},[l("span",null,"}")])])]),l("button",{class:"collapse"})],-1),l("h2",{id:"三、通用缓存模板设计",tabindex:"-1"},[a("三、通用缓存模板设计 "),l("a",{class:"header-anchor",href:"#三、通用缓存模板设计","aria-label":'Permalink to "三、通用缓存模板设计"'},"​")],-1),l("h3",{id:"_1-函数式编程解耦",tabindex:"-1"},[a("1. 函数式编程解耦 "),l("a",{class:"header-anchor",href:"#_1-函数式编程解耦","aria-label":'Permalink to "1. 函数式编程解耦"'},"​")],-1),l("div",{class:"language- vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"public <R,ID> R queryWithPassThrough(")]),a(`
`),l("span",{class:"line"},[l("span",null,"    String keyPrefix, ")]),a(`
`),l("span",{class:"line"},[l("span",null,"    ID id, ")]),a(`
`),l("span",{class:"line"},[l("span",null,"    Class<R> type, ")]),a(`
`),l("span",{class:"line"},[l("span",null,"    Function<ID,R> dbFallback, // 核心：数据库查询逻辑回调")]),a(`
`),l("span",{class:"line"},[l("span",null,"    Long time, ")]),a(`
`),l("span",{class:"line"},[l("span",null,"    TimeUnit unit) {")]),a(`
`),l("span",{class:"line"},[l("span",null,"    ")]),a(`
`),l("span",{class:"line"},[l("span",null,"    // ...缓存逻辑")]),a(`
`),l("span",{class:"line"},[l("span",null,"    R r = dbFallback.apply(id); // 执行数据库查询")]),a(`
`),l("span",{class:"line"},[l("span",null,"    // ...后续处理")]),a(`
`),l("span",{class:"line"},[l("span",null,"}")])])]),l("button",{class:"collapse"})],-1),l("h3",{id:"_2-泛型应用",tabindex:"-1"},[a("2. 泛型应用 "),l("a",{class:"header-anchor",href:"#_2-泛型应用","aria-label":'Permalink to "2. 泛型应用"'},"​")],-1),l("div",{class:"language- vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"public <R,ID> R queryWithLogicalExpire(")]),a(`
`),l("span",{class:"line"},[l("span",null,"    String keyPrefix,")]),a(`
`),l("span",{class:"line"},[l("span",null,"    ID id,")]),a(`
`),l("span",{class:"line"},[l("span",null,"    Class<R> type, // 泛型类类型")]),a(`
`),l("span",{class:"line"},[l("span",null,"    Function<ID,R> dbFallback,")]),a(`
`),l("span",{class:"line"},[l("span",null,"    Long time, ")]),a(`
`),l("span",{class:"line"},[l("span",null,"    TimeUnit unit) {")]),a(`
`),l("span",{class:"line"},[l("span",null,"    ")]),a(`
`),l("span",{class:"line"},[l("span",null,"    // 泛型反序列化")]),a(`
`),l("span",{class:"line"},[l("span",null,"    R r = JSONUtil.toBean((JSONObject) redisData.getData(), type);")]),a(`
`),l("span",{class:"line"},[l("span",null,"    // ...")]),a(`
`),l("span",{class:"line"},[l("span",null,"}")])])]),l("button",{class:"collapse"})],-1),l("h2",{id:"四、高并发优化实践",tabindex:"-1"},[a("四、高并发优化实践 "),l("a",{class:"header-anchor",href:"#四、高并发优化实践","aria-label":'Permalink to "四、高并发优化实践"'},"​")],-1),l("h3",{id:"_1-线程池异步重建",tabindex:"-1"},[a("1. 线程池异步重建 "),l("a",{class:"header-anchor",href:"#_1-线程池异步重建","aria-label":'Permalink to "1. 线程池异步重建"'},"​")],-1),l("div",{class:"language- vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"private static final ExecutorService CACHE_REBUILD_EXECUTOR = ")]),a(`
`),l("span",{class:"line"},[l("span",null,"    Executors.newFixedThreadPool(10);")]),a(`
`),l("span",{class:"line"},[l("span")]),a(`
`),l("span",{class:"line"},[l("span",null,"CACHE_REBUILD_EXECUTOR.submit(() -> {")]),a(`
`),l("span",{class:"line"},[l("span",null,"    try {")]),a(`
`),l("span",{class:"line"},[l("span",null,"        // 异步重建缓存")]),a(`
`),l("span",{class:"line"},[l("span",null,"        R r1 = dbFallback.apply(id);")]),a(`
`),l("span",{class:"line"},[l("span",null,"        this.setWithLogicalExpire(key, r1, time, unit);")]),a(`
`),l("span",{class:"line"},[l("span",null,"    } finally {")]),a(`
`),l("span",{class:"line"},[l("span",null,"        unLock(lockKey);")]),a(`
`),l("span",{class:"line"},[l("span",null,"    }")]),a(`
`),l("span",{class:"line"},[l("span",null,"});")])])]),l("button",{class:"collapse"})],-1),l("h3",{id:"_2-双重检查锁-double-check",tabindex:"-1"},[a("2. 双重检查锁（Double-Check） "),l("a",{class:"header-anchor",href:"#_2-双重检查锁-double-check","aria-label":'Permalink to "2. 双重检查锁（Double-Check）"'},"​")],-1),l("div",{class:"language- vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"// 在获取锁后再次检查缓存")]),a(`
`),l("span",{class:"line"},[l("span",null,"String latestShopJson = stringRedisTemplate.opsForValue().get(key);")]),a(`
`),l("span",{class:"line"},[l("span",null,"if (StrUtil.isNotBlank(latestShopJson)) {")]),a(`
`),l("span",{class:"line"},[l("span",null,"    // 如果已被其他线程重建，直接返回")]),a(`
`),l("span",{class:"line"},[l("span",null,"    return JSONUtil.toBean(/*...*/);")]),a(`
`),l("span",{class:"line"},[l("span",null,"}")])])]),l("button",{class:"collapse"})],-1),l("h2",{id:"五、redis使用最佳实践",tabindex:"-1"},[a("五、Redis使用最佳实践 "),l("a",{class:"header-anchor",href:"#五、redis使用最佳实践","aria-label":'Permalink to "五、Redis使用最佳实践"'},"​")],-1),l("ol",null,[l("li",null,[l("strong",null,"键名设计"),a("：使用业务前缀（如"),l("code",null,"CACHE_SHOP_KEY"),a("）避免冲突")]),l("li",null,[l("strong",null,"序列化"),a("：使用JSON格式存储复杂对象")]),l("li",null,[l("strong",null,"过期策略"),a("： "),l("ul",null,[l("li",null,[a("正常数据："),l("code",null,"CACHE_SHOP_TTL"),a("（30分钟）")]),l("li",null,[a("空值数据："),l("code",null,"CACHE_NULL_TTL"),a("（2分钟）")])])]),l("li",null,[l("strong",null,"连接池"),a("：合理配置连接池参数")]),l("li",null,[l("strong",null,"监控"),a("：监控缓存命中率、内存使用等关键指标")])],-1),l("h2",{id:"六、性能对比",tabindex:"-1"},[a("六、性能对比 "),l("a",{class:"header-anchor",href:"#六、性能对比","aria-label":'Permalink to "六、性能对比"'},"​")],-1),l("table",null,[l("thead",null,[l("tr",null,[l("th",{style:{"text-align":"left"}},"方案"),l("th",{style:{"text-align":"left"}},"优点"),l("th",{style:{"text-align":"left"}},"缺点"),l("th",{style:{"text-align":"left"}},"适用场景")])]),l("tbody",null,[l("tr",null,[l("td",{style:{"text-align":"left"}},"缓存穿透方案"),l("td",{style:{"text-align":"left"}},"简单有效，防止恶意攻击"),l("td",{style:{"text-align":"left"}},"可能缓存大量空值"),l("td",{style:{"text-align":"left"}},"查询不存在数据的场景")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"互斥锁方案"),l("td",{style:{"text-align":"left"}},"保证强一致性"),l("td",{style:{"text-align":"left"}},"线程阻塞，性能中等"),l("td",{style:{"text-align":"left"}},"对一致性要求高的场景")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"逻辑过期方案"),l("td",{style:{"text-align":"left"}},"高并发性能好，非阻塞"),l("td",{style:{"text-align":"left"}},"短暂数据不一致"),l("td",{style:{"text-align":"left"}},"高并发读场景")])])],-1),l("h2",{id:"七、总结与展望",tabindex:"-1"},[a("七、总结与展望 "),l("a",{class:"header-anchor",href:"#七、总结与展望","aria-label":'Permalink to "七、总结与展望"'},"​")],-1),l("p",null,"本文介绍的高并发缓存架构实现了：",-1),l("ol",null,[l("li",null,"多级缓存策略应对不同场景"),l("li",null,"泛型+函数式编程实现缓存模板复用"),l("li",null,"异步线程池提升系统吞吐量"),l("li",null,"分布式锁保证数据一致性")],-1),l("p",null,[l("strong",null,"未来优化方向"),a("：")],-1),l("ol",null,[l("li",null,"引入本地缓存（Caffeine）作为L1缓存"),l("li",null,"实现缓存预热机制"),l("li",null,"添加熔断降级策略"),l("li",null,"结合布隆过滤器优化缓存穿透防护")],-1),l("p",null,"通过合理的Redis缓存设计，系统QPS可从数据库直接支撑的2000提升到Redis支撑的10万+，同时保证系统的高可用性和数据一致性。",-1)])),"main-header":n(()=>[e(s.$slots,"main-header")]),"main-header-after":n(()=>[e(s.$slots,"main-header-after")]),"main-nav":n(()=>[e(s.$slots,"main-nav")]),"main-content-before":n(()=>[e(s.$slots,"main-content-before")]),"main-content":n(()=>[e(s.$slots,"main-content")]),"main-content-after":n(()=>[e(s.$slots,"main-content-after")]),"main-nav-before":n(()=>[e(s.$slots,"main-nav-before")]),"main-nav-after":n(()=>[e(s.$slots,"main-nav-after")]),comment:n(()=>[e(s.$slots,"comment")]),footer:n(()=>[e(s.$slots,"footer")]),aside:n(()=>[e(s.$slots,"aside")]),"aside-custom":n(()=>[e(s.$slots,"aside-custom")]),default:n(()=>[e(s.$slots,"default")]),_:3},8,["frontmatter"])}}};export{A as default,R as usePageData};
